// Comprehensive Basic to Standard SKU Migration Assessment Query
// This query identifies all resources requiring migration before September 30, 2025

let BasicPublicIPs = Resources
| where type =~ 'microsoft.network/publicipaddresses' 
| where sku.name =~ 'Basic'
| project 
    ResourceType = "Basic Public IP",
    ResourceId = id,
    ResourceName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SKU = sku.name,
    AllocationMethod = properties.publicIPAllocationMethod,
    AssociatedResource = coalesce(properties.ipConfiguration.id, "Unassociated"),
    IPAddress = properties.ipAddress;

let BasicLoadBalancers = Resources
| where type =~ 'microsoft.network/loadbalancers' 
| where sku.name =~ 'Basic'
| project 
    ResourceType = "Basic Load Balancer",
    ResourceId = id,
    ResourceName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SKU = sku.name,
    LoadBalancerType = iff(isnotempty(properties.frontendIPConfigurations[0].properties.publicIPAddress.id), "Public", "Internal"),
    BackendPoolCount = array_length(properties.backendAddressPools),
    FrontendIPCount = array_length(properties.frontendIPConfigurations);

let VMsWithBasicIPs = Resources
| where type =~ 'microsoft.compute/virtualmachines'
| project vmId = tolower(id), vmName = name, vmRG = resourceGroup, vmNics = properties.networkProfile.networkInterfaces
| join kind=inner (
    Resources 
    | where type =~ 'microsoft.network/networkinterfaces'
    | project nicVMId = tolower(tostring(properties.virtualMachine.id)), nicId = tolower(id), nicIPConfigs = properties.ipConfigurations
) on $left.vmId == $right.nicVMId
| join kind=inner (
    Resources
    | where type =~ 'microsoft.network/publicipaddresses' 
    | where sku.name =~ 'Basic'
    | project pipId = id, pipSku = sku.name, pipNicId = tolower(tostring(split(properties.ipConfiguration.id, '/ipConfigurations/')[0]))
) on $left.nicId == $right.pipNicId
| project 
    ResourceType = "VM with Basic Public IP",
    ResourceId = vmId,
    ResourceName = vmName,
    ResourceGroup = vmRG,
    SKU = "VM has Basic Public IP",
    PublicIPId = pipId,
    NetworkInterfaceId = nicId;

let VMSSWithBasicIPs = Resources
| where type =~ 'microsoft.compute/virtualmachinescalesets'
| where properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].properties.ipConfigurations[0].properties.publicIPAddressConfiguration.sku.name =~ 'Basic'
| project 
    ResourceType = "VMSS with Basic Public IP Config",
    ResourceId = id,
    ResourceName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SKU = "VMSS with Basic IP Configuration",
    Instances = properties.sku.capacity;

let VPNGatewaysWithBasicIPs = Resources
| where type =~ 'microsoft.network/virtualnetworkgateways'
| where properties.gatewayType =~ 'Vpn'
| project gwId = id, gwName = name, gwRG = resourceGroup, ipConfigs = properties.ipConfigurations
| mv-expand ipConfig = ipConfigs
| project gwId, gwName, gwRG, publicIPId = tostring(ipConfig.properties.publicIPAddress.id)
| join kind=inner (
    Resources
    | where type =~ 'microsoft.network/publicipaddresses'
    | where sku.name =~ 'Basic'
    | project pipId = id, pipSku = sku.name
) on $left.publicIPId == $right.pipId
| project 
    ResourceType = "VPN Gateway with Basic IP",
    ResourceId = gwId,
    ResourceName = gwName,
    ResourceGroup = gwRG,
    SKU = "VPN Gateway using Basic IP",
    PublicIPId = pipId;

let AppGatewaysV1 = Resources
| where type =~ 'microsoft.network/applicationgateways'
| where properties.sku.tier in~ ('Standard', 'WAF') // v1 SKUs
| project 
    ResourceType = "Application Gateway v1",
    ResourceId = id,
    ResourceName = name,
    ResourceGroup = resourceGroup,
    Location = location,
    SKU = strcat(tostring(properties.sku.tier), " (v1)"),
    Note = "Requires migration to v2";

let VMSSInBasicLB = Resources
| where type =~ 'microsoft.network/loadbalancers'
| where sku.name =~ 'Basic'
| mv-expand backendPool = properties.backendAddressPools
| mv-expand backendIpConfig = backendPool.properties.backendIPConfigurations
| where backendIpConfig.id contains "microsoft.compute/virtualmachinescalesets"
| project 
    ResourceType = "VMSS in Basic Load Balancer",
    ResourceId = tostring(split(tostring(backendIpConfig.id), '/virtualMachines/')[0]),
    LoadBalancerId = id,
    LoadBalancerName = name;

// Union all results
union 
    BasicPublicIPs,
    BasicLoadBalancers,
    VMsWithBasicIPs,
    VMSSWithBasicIPs,
    VPNGatewaysWithBasicIPs,
    AppGatewaysV1,
    VMSSInBasicLB
| distinct ResourceType, ResourceId, ResourceName, ResourceGroup, Location, SKU, ['Note']
| order by ResourceType asc, ResourceGroup asc, ResourceName asc
