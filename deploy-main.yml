# .github/workflows/bootstrap-workflow.yml
name: Bootstrap Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      action:
        required: true
        type: string
      dry_run:
        required: false
        type: boolean
        default: true
    outputs:
      account_id:
        description: "AWS Account ID"
        value: ${{ jobs.bootstrap-accounts.outputs.account_id }}
      vpc_id:
        description: "Shared VPC ID"
        value: ${{ jobs.bootstrap-shared-vpc.outputs.vpc_id }}

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: "us-east-1"

jobs:
  # Step 1: Account-level bootstrap
  bootstrap-accounts:
    runs-on: ubuntu-latest
    outputs:
      account_id: ${{ steps.terraform-accounts.outputs.account_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init (Accounts)
        working-directory: ./landing-zone/accounts
        run: |
          terraform init \
            -backend-config="../../bootstrap/accounts/${{ inputs.environment }}/backend.tfvars" \
            -reconfigure
            
      - name: Terraform Execute (Accounts)
        id: terraform-accounts
        working-directory: ./landing-zone/accounts
        run: |
          if [[ "${{ inputs.action }}" == "plan" || "${{ inputs.dry_run }}" == "true" ]]; then
            echo "ðŸ“‹ Planning accounts for ${{ inputs.environment }}..."
            terraform plan \
              -var-file="../../bootstrap/accounts/${{ inputs.environment }}/terraform.tfvars" \
              -out="accounts-${{ inputs.environment }}.tfplan"
          elif [[ "${{ inputs.action }}" == "apply" ]]; then
            echo "ðŸš€ Applying accounts for ${{ inputs.environment }}..."
            terraform apply \
              -var-file="../../bootstrap/accounts/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
              
            # Capture account ID for downstream jobs
            ACCOUNT_ID=$(terraform output -raw account_id 2>/dev/null || echo "unknown")
            echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "ðŸ’¥ Destroying accounts for ${{ inputs.environment }}..."
            terraform destroy \
              -var-file="../../bootstrap/accounts/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          fi

  # Step 2: Shared VPC bootstrap
  bootstrap-shared-vpc:
    runs-on: ubuntu-latest
    needs: bootstrap-accounts
    if: needs.bootstrap-accounts.result == 'success' || needs.bootstrap-accounts.result == 'skipped'
    outputs:
      vpc_id: ${{ steps.terraform-vpc.outputs.vpc_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init (Shared VPC)
        working-directory: ./landing-zone/shared-vpc
        run: |
          terraform init \
            -backend-config="../../bootstrap/shared-vpc/${{ inputs.environment }}/backend.tfvars" \
            -reconfigure
            
      - name: Terraform Execute (Shared VPC)
        id: terraform-vpc
        working-directory: ./landing-zone/shared-vpc
        run: |
          if [[ "${{ inputs.action }}" == "plan" || "${{ inputs.dry_run }}" == "true" ]]; then
            echo "ðŸ“‹ Planning shared VPC for ${{ inputs.environment }}..."
            terraform plan \
              -var-file="../../bootstrap/shared-vpc/${{ inputs.environment }}/terraform.tfvars" \
              -out="shared-vpc-${{ inputs.environment }}.tfplan"
          elif [[ "${{ inputs.action }}" == "apply" ]]; then
            echo "ðŸš€ Applying shared VPC for ${{ inputs.environment }}..."
            terraform apply \
              -var-file="../../bootstrap/shared-vpc/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
              
            # Capture VPC ID for downstream jobs
            VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "unknown")
            echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "ðŸ’¥ Destroying shared VPC for ${{ inputs.environment }}..."
            terraform destroy \
              -var-file="../../bootstrap/shared-vpc/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          fi

  # Step 3: Shared EKS bootstrap
  bootstrap-shared-eks:
    runs-on: ubuntu-latest
    needs: bootstrap-shared-vpc
    if: needs.bootstrap-shared-vpc.result == 'success' || needs.bootstrap-shared-vpc.result == 'skipped'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init (Shared EKS)
        working-directory: ./landing-zone/shared-eks
        run: |
          terraform init \
            -backend-config="../../bootstrap/shared-eks/${{ inputs.environment }}/backend.tfvars" \
            -reconfigure
            
      - name: Terraform Execute (Shared EKS)
        working-directory: ./landing-zone/shared-eks
        run: |
          if [[ "${{ inputs.action }}" == "plan" || "${{ inputs.dry_run }}" == "true" ]]; then
            echo "ðŸ“‹ Planning shared EKS for ${{ inputs.environment }}..."
            terraform plan \
              -var-file="../../bootstrap/shared-eks/${{ inputs.environment }}/terraform.tfvars" \
              -out="shared-eks-${{ inputs.environment }}.tfplan"
          elif [[ "${{ inputs.action }}" == "apply" ]]; then
            echo "ðŸš€ Applying shared EKS for ${{ inputs.environment }}..."
            terraform apply \
              -var-file="../../bootstrap/shared-eks/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          elif [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "ðŸ’¥ Destroying shared EKS for ${{ inputs.environment }}..."
            terraform destroy \
              -var-file="../../bootstrap/shared-eks/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          fi

  # Step 4: Team-specific bootstrap (IAM roles/policies with "bootstrap" prefix)
  bootstrap-teams:
    runs-on: ubuntu-latest
    needs: bootstrap-accounts
    if: needs.bootstrap-accounts.result == 'success' || needs.bootstrap-accounts.result == 'skipped'
    strategy:
      matrix:
        team: [platform-team, payments-team, frontend-team]  # Adjust to your teams
      fail-fast: false
      max-parallel: 3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init (Team Bootstrap)
        working-directory: ./landing-zone/teams
        run: |
          terraform init \
            -backend-config="../../bootstrap/teams/${{ matrix.team }}/${{ inputs.environment }}/backend.tfvars" \
            -reconfigure
            
      - name: Terraform Execute (Team Bootstrap)
        working-directory: ./landing-zone/teams
        run: |
          if [[ "${{ inputs.action }}" == "plan" || "${{ inputs.dry_run }}" == "true" ]]; then
            echo "ðŸ“‹ Planning ${{ matrix.team }} bootstrap for ${{ inputs.environment }}..."
            terraform plan \
              -var-file="../../bootstrap/teams/${{ matrix.team }}/${{ inputs.environment }}/terraform.tfvars" \
              -out="${{ matrix.team }}-${{ inputs.environment }}.tfplan"
          elif [[ "${{ inputs.action }}" == "apply" ]]; then
            echo "ðŸš€ Applying ${{ matrix.team }} bootstrap for ${{ inputs.environment }}..."
            terraform apply \
              -var-file="../../bootstrap/teams/${{ matrix.team }}/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          elif [[ "${{ inputs.action }}" == "destroy" ]]; then
            echo "ðŸ’¥ Destroying ${{ matrix.team }} bootstrap for ${{ inputs.environment }}..."
            terraform destroy \
              -var-file="../../bootstrap/teams/${{ matrix.team }}/${{ inputs.environment }}/terraform.tfvars" \
              -auto-approve
          fi
