# .github/workflows/bootstrap.yml
# GitHub Actions workflow to bootstrap AWS infrastructure from scratch
# Handles the chicken-and-egg problem of creating S3 state bucket

name: 🚀 AWS Infrastructure Bootstrap

on:
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace to bootstrap'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - nonprod
        - both
      
      force_recreate:
        description: 'Force recreate resources (WARNING: Destructive)'
        required: false
        default: false
        type: boolean

      migrate_to_remote_state:
        description: 'Migrate to remote state after creation'
        required: true
        default: true
        type: boolean

env:
  TF_VERSION: '1.7.0'
  AWS_REGION: 'us-east-1'
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: '-no-color'

jobs:
  # Stage 1: Bootstrap Production Workspace
  bootstrap-prod:
    name: 🏗️ Bootstrap Production
    runs-on: ubuntu-latest
    if: github.event.inputs.workspace == 'prod' || github.event.inputs.workspace == 'both'
    permissions:
      id-token: write
      contents: read
      actions: write

    outputs:
      prod_oidc_provider_arn: ${{ steps.outputs.outputs.prod_oidc_arn }}
      prod_state_bucket: ${{ steps.outputs.outputs.prod_state_bucket }}
      prod_lock_table: ${{ steps.outputs.outputs.prod_lock_table }}

    steps:
      - name: 📋 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔑 Configure AWS Credentials (Admin for Bootstrap)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # For initial bootstrap, you need admin credentials
          # After bootstrap, you'll use the OIDC roles created
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📁 Setup Terraform Directory
        run: |
          cd terraform-workspace-bootstrap
          echo "Working in: $(pwd)"
          ls -la

      - name: 🎯 Initialize Terraform (Local State)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🔄 Initializing Terraform with LOCAL state for bootstrap..."
          terraform init
          
          echo "🏗️ Creating production workspace..."
          terraform workspace new prod || terraform workspace select prod
          
          echo "📊 Current workspace: $(terraform workspace show)"

      - name: ✅ Validate Terraform Configuration
        working-directory: terraform-workspace-bootstrap
        run: terraform validate

      - name: 📋 Terraform Plan (Production)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "📋 Planning production bootstrap..."
          terraform plan -var-file="prod.tfvars" -out=prod-bootstrap.tfplan
          
          echo "📊 Plan summary:"
          terraform show -no-color prod-bootstrap.tfplan

      - name: 🚀 Apply Bootstrap (Production)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🚀 Applying production bootstrap..."
          terraform apply prod-bootstrap.tfplan
          
          echo "✅ Production bootstrap complete!"

      - name: 📤 Capture Outputs
        id: outputs
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "📤 Capturing Terraform outputs..."
          
          OIDC_ARN=$(terraform output -raw bootstrap_results | jq -r '.github_actions_role_arn' | sed 's/role\/.*$/oidc-provider\/token.actions.githubusercontent.com/')
          STATE_BUCKET=$(terraform output -raw bootstrap_results | jq -r '.state_bucket')
          LOCK_TABLE=$(terraform output -raw bootstrap_results | jq -r '.lock_table')
          
          echo "prod_oidc_arn=${OIDC_ARN}" >> $GITHUB_OUTPUT
          echo "prod_state_bucket=${STATE_BUCKET}" >> $GITHUB_OUTPUT
          echo "prod_lock_table=${LOCK_TABLE}" >> $GITHUB_OUTPUT
          
          echo "🎯 Production outputs:"
          echo "  OIDC Provider: ${OIDC_ARN}"
          echo "  State Bucket: ${STATE_BUCKET}"
          echo "  Lock Table: ${LOCK_TABLE}"

      - name: 💾 Archive Local State (Production)
        uses: actions/upload-artifact@v4
        with:
          name: terraform-local-state-prod
          path: |
            terraform-workspace-bootstrap/terraform.tfstate*
            terraform-workspace-bootstrap/.terraform/
          retention-days: 30

      - name: 🔄 Migrate to Remote State (Production)
        if: github.event.inputs.migrate_to_remote_state == 'true'
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🔄 Migrating production workspace to remote state..."
          
          STATE_BUCKET="${{ steps.outputs.outputs.prod_state_bucket }}"
          LOCK_TABLE="${{ steps.outputs.outputs.prod_lock_table }}"
          
          # Reconfigure backend to use the newly created S3 bucket
          terraform init -migrate-state \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="key=bootstrap/prod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${LOCK_TABLE}" \
            -backend-config="encrypt=true" \
            -input=false
          
          echo "✅ Production state migrated to S3!"
          
          # Verify the migration worked
          terraform plan -var-file="prod.tfvars"
          echo "🎯 Remote state migration verified!"

  # Stage 2: Bootstrap Non-Production Workspace
  bootstrap-nonprod:
    name: 🛠️ Bootstrap Non-Production
    runs-on: ubuntu-latest
    if: (github.event.inputs.workspace == 'nonprod' || github.event.inputs.workspace == 'both') && !failure()
    needs: [bootstrap-prod]
    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: 📋 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔑 Configure AWS Credentials (Admin for Bootstrap)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 💾 Download Production State (if both workspaces)
        if: github.event.inputs.workspace == 'both'
        uses: actions/download-artifact@v4
        with:
          name: terraform-local-state-prod
          path: terraform-workspace-bootstrap/

      - name: 🎯 Initialize Terraform (Local State)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🔄 Initializing Terraform for nonprod workspace..."
          terraform init
          
          echo "🏗️ Creating nonprod workspace..."
          terraform workspace new nonprod || terraform workspace select nonprod
          
          echo "📊 Current workspace: $(terraform workspace show)"

      - name: 📋 Terraform Plan (Non-Production)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "📋 Planning nonprod bootstrap..."
          
          # Get OIDC provider ARN from prod (if both workspaces)
          OIDC_ARN="${{ needs.bootstrap-prod.outputs.prod_oidc_provider_arn }}"
          
          if [ -n "$OIDC_ARN" ]; then
            echo "🔗 Using OIDC provider from production: $OIDC_ARN"
            terraform plan -var-file="nonprod.tfvars" \
              -var="existing_oidc_provider_arn=$OIDC_ARN" \
              -out=nonprod-bootstrap.tfplan
          else
            echo "🆕 Creating new OIDC provider for nonprod"
            terraform plan -var-file="nonprod.tfvars" -out=nonprod-bootstrap.tfplan
          fi

      - name: 🚀 Apply Bootstrap (Non-Production)
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🚀 Applying nonprod bootstrap..."
          terraform apply nonprod-bootstrap.tfplan
          
          echo "✅ Non-production bootstrap complete!"

      - name: 💾 Archive Local State (Non-Production)
        uses: actions/upload-artifact@v4
        with:
          name: terraform-local-state-nonprod
          path: |
            terraform-workspace-bootstrap/terraform.tfstate*
            terraform-workspace-bootstrap/.terraform/
          retention-days: 30

      - name: 🔄 Migrate to Remote State (Non-Production)
        if: github.event.inputs.migrate_to_remote_state == 'true'
        working-directory: terraform-workspace-bootstrap
        run: |
          echo "🔄 Migrating nonprod workspace to remote state..."
          
          STATE_BUCKET=$(terraform output -raw bootstrap_results | jq -r '.state_bucket')
          LOCK_TABLE=$(terraform output -raw bootstrap_results | jq -r '.lock_table')
          
          # Reconfigure backend to use the newly created S3 bucket
          terraform init -migrate-state \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="key=bootstrap/nonprod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${LOCK_TABLE}" \
            -backend-config="encrypt=true" \
            -input=false
          
          echo "✅ Non-production state migrated to S3!"
          
          # Verify the migration worked
          OIDC_ARN="${{ needs.bootstrap-prod.outputs.prod_oidc_provider_arn }}"
          if [ -n "$OIDC_ARN" ]; then
            terraform plan -var-file="nonprod.tfvars" -var="existing_oidc_provider_arn=$OIDC_ARN"
          else
            terraform plan -var-file="nonprod.tfvars"
          fi
          echo "🎯 Remote state migration verified!"

  # Stage 3: Verification and Summary
  verify-bootstrap:
    name: ✅ Verify Bootstrap
    runs-on: ubuntu-latest
    needs: [bootstrap-prod, bootstrap-nonprod]
    if: always() && !failure()
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 📋 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔑 Test OIDC Authentication (Production)
        if: needs.bootstrap-prod.outputs.prod_oidc_provider_arn != ''
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.PROJECT_NAME }}-github-actions-terraform-prod"
          role-session-name: bootstrap-verification-prod
          aws-region: ${{ env.AWS_REGION }}

      - name: 🧪 Test AWS Access (Production)
        if: needs.bootstrap-prod.outputs.prod_oidc_provider_arn != ''
        continue-on-error: true
        run: |
          echo "🧪 Testing production AWS access..."
          aws sts get-caller-identity
          aws s3 ls "${{ needs.bootstrap-prod.outputs.prod_state_bucket }}" || echo "Bucket not accessible yet (normal for new buckets)"

      - name: 📊 Bootstrap Summary
        run: |
          echo "## 🎉 Bootstrap Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Resources Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.workspace }}" == "prod" ] || [ "${{ github.event.inputs.workspace }}" == "both" ]; then
            echo "#### 🏭 Production Environment" >> $GITHUB_STEP_SUMMARY
            echo "- **State Bucket**: \`${{ needs.bootstrap-prod.outputs.prod_state_bucket }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Lock Table**: \`${{ needs.bootstrap-prod.outputs.prod_lock_table }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **OIDC Provider**: \`${{ needs.bootstrap-prod.outputs.prod_oidc_provider_arn }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ github.event.inputs.workspace }}" == "nonprod" ] || [ "${{ github.event.inputs.workspace }}" == "both" ]; then
            echo "#### 🛠️ Non-Production Environment" >> $GITHUB_STEP_SUMMARY
            echo "- **State Bucket**: Created ✅" >> $GITHUB_STEP_SUMMARY
            echo "- **Lock Table**: Created ✅" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Environments**: Configured ✅" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Check GitHub Environments**: Go to [Repository Settings → Environments](https://github.com/${{ github.repository }}/settings/environments)" >> $GITHUB_STEP_SUMMARY
          echo "2. **Verify Secrets**: All AWS secrets should be automatically configured" >> $GITHUB_STEP_SUMMARY
          echo "3. **Test Deployment**: Push to \`develop\` branch to test nonprod deployment" >> $GITHUB_STEP_SUMMARY
          echo "4. **Production Approval**: Push to \`main\` branch to test production approval workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Backend Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your infrastructure projects should now use these backend configurations:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```hcl" >> $GITHUB_STEP_SUMMARY
          echo "# For production workspace" >> $GITHUB_STEP_SUMMARY
          echo "terraform {" >> $GITHUB_STEP_SUMMARY
          echo "  backend \"s3\" {" >> $GITHUB_STEP_SUMMARY
          echo "    bucket         = \"${{ needs.bootstrap-prod.outputs.prod_state_bucket }}\"" >> $GITHUB_STEP_SUMMARY
          echo "    key            = \"infrastructure/prod/terraform.tfstate\"" >> $GITHUB_STEP_SUMMARY
          echo "    region         = \"${{ env.AWS_REGION }}\"" >> $GITHUB_STEP_SUMMARY
          echo "    dynamodb_table = \"${{ needs.bootstrap-prod.outputs.prod_lock_table }}\"" >> $GITHUB_STEP_SUMMARY
          echo "    encrypt        = true" >> $GITHUB_STEP_SUMMARY
          echo "  }" >> $GITHUB_STEP_SUMMARY
          echo "}" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  # Stage 4: Cleanup (Optional)
  cleanup-artifacts:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [verify-bootstrap]
    if: always() && github.event.inputs.migrate_to_remote_state == 'true'
    
    steps:
      - name: 🧹 Clean up local state artifacts
        run: |
          echo "🧹 Local state has been migrated to S3"
          echo "The artifacts will be automatically cleaned up after 30 days"
          echo "If you need to access the local state files, download them from the artifacts section"
