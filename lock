## modules/ansible-runner/main.tf

terraform {
  required_providers {
    null = {
      source  = "hashicorp/null"
      version = "~> 3.0"
    }
  }
}

# Create inventory file dynamically
resource "local_file" "ansible_inventory" {
  content = templatefile("${path.module}/templates/inventory.tftpl", {
    hosts = var.target_hosts
  })
  filename        = "${path.module}/generated/inventory_${var.deployment_name}.ini"
  file_permission = "0644"

  lifecycle {
    create_before_destroy = true
  }
}

# Create ansible variables file
resource "local_file" "ansible_vars" {
  content = templatefile("${path.module}/templates/extra_vars.tftpl", {
    extra_vars = var.ansible_extra_vars
  })
  filename        = "${path.module}/generated/extra_vars_${var.deployment_name}.yml"
  file_permission = "0644"

  lifecycle {
    create_before_destroy = true
  }
}

# Save SSH private key temporarily if provided
resource "local_sensitive_file" "ssh_private_key" {
  count = var.ssh_private_key != null ? 1 : 0

  content         = var.ssh_private_key
  filename        = "${path.module}/generated/ssh_key_${var.deployment_name}.pem"
  file_permission = "0600"

  lifecycle {
    create_before_destroy = true
  }
}

# Wait for hosts to be ready
resource "null_resource" "wait_for_hosts" {
  count = var.wait_for_connection ? 1 : 0

  triggers = {
    host_ids = join(",", [for host in var.target_hosts : host.id])
  }

  provisioner "local-exec" {
    command = <<-EOT
      echo "Waiting for hosts to be ready..."
      for i in {1..${var.connection_timeout}}; do
        all_ready=true
        %{for host in var.target_hosts~}
        if ! nc -z -w5 ${host.ip} ${host.port}; then
          all_ready=false
          break
        fi
        %{endfor~}
        if [ "$all_ready" = true ]; then
          echo "All hosts are ready"
          exit 0
        fi
        echo "Waiting... ($i/${var.connection_timeout})"
        sleep 10
      done
      echo "Timeout waiting for hosts"
      exit 1
    EOT

    interpreter = ["bash", "-c"]
  }

  depends_on = [local_file.ansible_inventory]
}

# Run Ansible playbook
resource "null_resource" "ansible_run" {
  triggers = {
    playbook_checksum = filemd5(var.playbook_path)
    inventory_content = local_file.ansible_inventory.content
    vars_content      = local_file.ansible_vars.content
    always_run        = var.always_run ? timestamp() : ""
  }

  provisioner "local-exec" {
    command = <<-EOT
      set -e
      
      # Set up environment
      export ANSIBLE_HOST_KEY_CHECKING=${var.ansible_host_key_checking ? "True" : "False"}
      export ANSIBLE_FORCE_COLOR=${var.ansible_force_color ? "True" : "False"}
      
      # Build ansible-playbook command
      ANSIBLE_CMD="ansible-playbook ${var.playbook_path}"
      ANSIBLE_CMD="$ANSIBLE_CMD -i ${local_file.ansible_inventory.filename}"
      ANSIBLE_CMD="$ANSIBLE_CMD -e @${local_file.ansible_vars.filename}"
      
      # Add SSH key if provided
      %{if var.ssh_private_key != null~}
      ANSIBLE_CMD="$ANSIBLE_CMD --private-key=${local_sensitive_file.ssh_private_key[0].filename}"
      %{endif~}
      
      # Add user if provided
      %{if var.ssh_user != null~}
      ANSIBLE_CMD="$ANSIBLE_CMD -u ${var.ssh_user}"
      %{endif~}
      
      # Add verbosity
      %{if var.verbosity > 0~}
      ANSIBLE_CMD="$ANSIBLE_CMD -${"v" * var.verbosity}"
      %{endif~}
      
      # Add tags if provided
      %{if length(var.tags) > 0~}
      ANSIBLE_CMD="$ANSIBLE_CMD --tags ${join(",", var.tags)}"
      %{endif~}
      
      # Add skip-tags if provided
      %{if length(var.skip_tags) > 0~}
      ANSIBLE_CMD="$ANSIBLE_CMD --skip-tags ${join(",", var.skip_tags)}"
      %{endif~}
      
      # Add extra CLI args
      %{if var.ansible_extra_args != ""~}
      ANSIBLE_CMD="$ANSIBLE_CMD ${var.ansible_extra_args}"
      %{endif~}
      
      # Run playbook
      echo "Running: $ANSIBLE_CMD"
      $ANSIBLE_CMD
    EOT

    interpreter = ["bash", "-c"]
    working_dir = var.working_directory
  }

  # Cleanup on destroy if enabled
  provisioner "local-exec" {
    when    = destroy
    command = "echo 'Ansible resources cleaned up'"
  }

  depends_on = [
    local_file.ansible_inventory,
    local_file.ansible_vars,
    null_resource.wait_for_hosts
  ]
}

# Cleanup temporary files after execution
resource "null_resource" "cleanup" {
  count = var.cleanup_on_apply ? 1 : 0

  triggers = {
    ansible_run_id = null_resource.ansible_run.id
  }

  provisioner "local-exec" {
    command = <<-EOT
      sleep 5
      rm -f ${local_file.ansible_inventory.filename}
      rm -f ${local_file.ansible_vars.filename}
      %{if var.ssh_private_key != null~}
      rm -f ${local_sensitive_file.ssh_private_key[0].filename}
      %{endif~}
    EOT

    interpreter = ["bash", "-c"]
  }

  depends_on = [null_resource.ansible_run]
}

## modules/ansible-runner/variables.tf

variable "deployment_name" {
  description = "Unique name for this deployment to avoid file conflicts"
  type        = string
}

variable "playbook_path" {
  description = "Path to the Ansible playbook file"
  type        = string
}

variable "target_hosts" {
  description = "List of target hosts with their properties"
  type = list(object({
    id    = string
    name  = string
    ip    = string
    port  = optional(number, 22)
    group = optional(string, "all")
  }))
}

variable "ansible_extra_vars" {
  description = "Extra variables to pass to Ansible as a map"
  type        = map(any)
  default     = {}
}

variable "ssh_private_key" {
  description = "SSH private key content for authentication (sensitive)"
  type        = string
  sensitive   = true
  default     = null
}

variable "ssh_user" {
  description = "SSH user for remote connections"
  type        = string
  default     = null
}

variable "ansible_host_key_checking" {
  description = "Enable SSH host key checking"
  type        = bool
  default     = false
}

variable "ansible_force_color" {
  description = "Force colored output"
  type        = bool
  default     = true
}

variable "verbosity" {
  description = "Ansible verbosity level (0-4)"
  type        = number
  default     = 0

  validation {
    condition     = var.verbosity >= 0 && var.verbosity <= 4
    error_message = "Verbosity must be between 0 and 4."
  }
}

variable "tags" {
  description = "Only run plays and tasks tagged with these values"
  type        = list(string)
  default     = []
}

variable "skip_tags" {
  description = "Skip plays and tasks with these tags"
  type        = list(string)
  default     = []
}

variable "ansible_extra_args" {
  description = "Additional command-line arguments to pass to ansible-playbook"
  type        = string
  default     = ""
}

variable "working_directory" {
  description = "Working directory for ansible-playbook execution"
  type        = string
  default     = "."
}

variable "wait_for_connection" {
  description = "Wait for hosts to be reachable before running playbook"
  type        = bool
  default     = true
}

variable "connection_timeout" {
  description = "Timeout in seconds when waiting for connection (10s intervals)"
  type        = number
  default     = 30
}

variable "always_run" {
  description = "Always run the playbook, even if no changes detected"
  type        = bool
  default     = false
}

variable "cleanup_on_apply" {
  description = "Clean up generated files after successful apply"
  type        = bool
  default     = false
}

## modules/ansible-runner/outputs.tf

output "inventory_file" {
  description = "Path to generated inventory file"
  value       = local_file.ansible_inventory.filename
}

output "vars_file" {
  description = "Path to generated vars file"
  value       = local_file.ansible_vars.filename
}

output "execution_id" {
  description = "ID of the Ansible execution"
  value       = null_resource.ansible_run.id
}

output "target_hosts_summary" {
  description = "Summary of target hosts"
  value = {
    count = length(var.target_hosts)
    hosts = [for host in var.target_hosts : host.name]
  }
}

## modules/ansible-runner/templates/inventory.tftpl

# Auto-generated Ansible inventory
%{~ for host in hosts ~}
[${host.group}]
${host.name} ansible_host=${host.ip} ansible_port=${host.port}

%{~ endfor ~}

## modules/ansible-runner/templates/extra_vars.tftpl

---
# Auto-generated Ansible extra vars
%{~ for key, value in extra_vars ~}
${key}: ${jsonencode(value)}
%{~ endfor ~}
