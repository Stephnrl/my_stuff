name: EKS Deployment and RBAC Test

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      test_unauthorized_namespace:
        description: 'Test unauthorized namespace access'
        required: false
        default: 'default'
        type: string

permissions:
  id-token: write   # Required for OIDC
  contents: read

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    environment: devsecops-prod-poc
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.TF_STATE_REGION }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Verify AWS Identity
        run: |
          echo "=== AWS Identity ==="
          aws sts get-caller-identity
          echo ""
          echo "Assumed Role: ${{ vars.AWS_ROLE_ARN }}"
          echo "K8s Group: ${{ vars.AWS_EKS_GROUP }}"
          echo "Namespace: ${{ vars.NAMESPACE }}"

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          # Extract cluster name from context (adjust if you pass it differently)
          # For now, you'll need to pass this - add it as a variable or hardcode your cluster name
          CLUSTER_NAME="your-cluster-name"  # TODO: Replace or add as environment variable
          
          aws eks update-kubeconfig \
            --region ${{ vars.TF_STATE_REGION }} \
            --name ${CLUSTER_NAME}

      - name: Verify EKS Access
        run: |
          echo "=== Testing Cluster Access ==="
          kubectl auth can-i get pods -n ${{ vars.NAMESPACE }}
          kubectl auth can-i create deployments -n ${{ vars.NAMESPACE }}
          kubectl auth can-i delete pods -n ${{ vars.NAMESPACE }}

      - name: Create Test Application Manifest
        run: |
          cat <<EOF > test-app.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: test-app-${{ github.run_number }}
            namespace: ${{ vars.NAMESPACE }}
            labels:
              app: test-app
              deployed-by: github-actions
              run-id: "${{ github.run_id }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: test-app
                run-id: "${{ github.run_id }}"
            template:
              metadata:
                labels:
                  app: test-app
                  run-id: "${{ github.run_id }}"
              spec:
                containers:
                - name: nginx
                  image: nginx:alpine
                  ports:
                  - containerPort: 80
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "100m"
                    limits:
                      memory: "128Mi"
                      cpu: "200m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: test-app-service-${{ github.run_number }}
            namespace: ${{ vars.NAMESPACE }}
          spec:
            selector:
              app: test-app
              run-id: "${{ github.run_id }}"
            ports:
            - protocol: TCP
              port: 80
              targetPort: 80
            type: ClusterIP
          EOF

      - name: Deploy Test Application
        run: |
          echo "=== Deploying to Namespace: ${{ vars.NAMESPACE }} ==="
          kubectl apply -f test-app.yaml
          
          echo ""
          echo "=== Waiting for Deployment ==="
          kubectl wait --for=condition=available --timeout=120s \
            deployment/test-app-${{ github.run_number }} \
            -n ${{ vars.NAMESPACE }}

      - name: Verify Deployment
        run: |
          echo "=== Deployment Status ==="
          kubectl get deployments -n ${{ vars.NAMESPACE }}
          
          echo ""
          echo "=== Pod Status ==="
          kubectl get pods -n ${{ vars.NAMESPACE }} -l run-id="${{ github.run_id }}"
          
          echo ""
          echo "=== Service Status ==="
          kubectl get svc -n ${{ vars.NAMESPACE }}

      - name: Test RBAC - Authorized Namespace
        run: |
          echo "=== Testing Authorized Access to ${{ vars.NAMESPACE }} ==="
          
          # These should succeed
          echo "✓ Testing: List pods"
          kubectl get pods -n ${{ vars.NAMESPACE }}
          
          echo "✓ Testing: Describe deployment"
          kubectl describe deployment test-app-${{ github.run_number }} -n ${{ vars.NAMESPACE }}
          
          echo "✓ Testing: View logs"
          POD_NAME=$(kubectl get pods -n ${{ vars.NAMESPACE }} -l run-id="${{ github.run_id }}" -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME -n ${{ vars.NAMESPACE }} --tail=10 || echo "No logs yet (pod may still be starting)"

      - name: Test RBAC - Unauthorized Namespace
        run: |
          UNAUTHORIZED_NS="${{ inputs.test_unauthorized_namespace || 'default' }}"
          echo "=== Testing Unauthorized Access to ${UNAUTHORIZED_NS} ==="
          
          # These should FAIL
          echo "Testing: List pods in unauthorized namespace (should fail)"
          if kubectl get pods -n ${UNAUTHORIZED_NS} 2>&1; then
            echo "❌ ERROR: Should NOT have access to ${UNAUTHORIZED_NS}"
            exit 1
          else
            echo "✓ PASS: Correctly denied access to ${UNAUTHORIZED_NS}"
          fi
          
          echo ""
          echo "Testing: Create deployment in unauthorized namespace (should fail)"
          if kubectl run test-pod --image=nginx -n ${UNAUTHORIZED_NS} 2>&1; then
            echo "❌ ERROR: Should NOT be able to create resources in ${UNAUTHORIZED_NS}"
            kubectl delete pod test-pod -n ${UNAUTHORIZED_NS} 2>/dev/null || true
            exit 1
          else
            echo "✓ PASS: Correctly denied resource creation in ${UNAUTHORIZED_NS}"
          fi

      - name: Test Cross-Namespace Permissions
        run: |
          echo "=== Testing Can-I Permissions ==="
          
          echo "Authorized namespace (${{ vars.NAMESPACE }}):"
          echo -n "  get pods: "
          kubectl auth can-i get pods -n ${{ vars.NAMESPACE }} && echo "✓" || echo "✗"
          echo -n "  create pods: "
          kubectl auth can-i create pods -n ${{ vars.NAMESPACE }} && echo "✓" || echo "✗"
          echo -n "  delete pods: "
          kubectl auth can-i delete pods -n ${{ vars.NAMESPACE }} && echo "✓" || echo "✗"
          
          echo ""
          UNAUTHORIZED_NS="${{ inputs.test_unauthorized_namespace || 'default' }}"
          echo "Unauthorized namespace (${UNAUTHORIZED_NS}):"
          echo -n "  get pods: "
          kubectl auth can-i get pods -n ${UNAUTHORIZED_NS} && echo "❌ SHOULD BE DENIED" || echo "✓ Correctly denied"
          echo -n "  create pods: "
          kubectl auth can-i create pods -n ${UNAUTHORIZED_NS} && echo "❌ SHOULD BE DENIED" || echo "✓ Correctly denied"

      - name: Cleanup Test Resources
        if: always()
        run: |
          echo "=== Cleaning up test resources ==="
          kubectl delete -f test-app.yaml --ignore-not-found=true || echo "Cleanup completed (some resources may not exist)"
          
          echo ""
          echo "=== Remaining resources in namespace ==="
          kubectl get all -n ${{ vars.NAMESPACE }}

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "╔════════════════════════════════════════╗"
          echo "║     EKS RBAC Test Summary              ║"
          echo "╚════════════════════════════════════════╝"
          echo ""
          echo "Cluster: your-cluster-name"
          echo "Namespace: ${{ vars.NAMESPACE }}"
          echo "IAM Role: ${{ vars.AWS_ROLE_ARN }}"
          echo "K8s Group: ${{ vars.AWS_EKS_GROUP }}"
          echo "Deployment: test-app-${{ github.run_number }}"
          echo ""
          echo "GitHub Run: ${{ github.run_id }}"
          echo "Triggered by: ${{ github.actor }}"
