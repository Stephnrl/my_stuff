# RHEL 9 Hardened Image Pipeline - Implementation

## Epic 1: Planning & Requirements
- [ ] Document current VM provisioning workflow and pain points
- [ ] Identify specific STIG controls that conflict with container workloads
  - [ ] Test baseline RHEL 9 STIG application with Podman/Docker
  - [ ] Document failing controls and required exceptions
- [ ] Define compliance requirements with security/compliance team
- [ ] Get approval for self-managed image hardening approach
- [ ] Document access control requirements (AD vs local accounts)
- [ ] Define Service Level Objectives (SLO) for image build/update cadence

## Epic 2: Infrastructure Setup
- [ ] Create Azure Service Principal for Packer builds
  - [ ] Assign required RBAC permissions (Contributor on resource group)
  - [ ] Store credentials in Key Vault / GitHub Secrets
- [ ] Set up Azure Compute Gallery
  - [ ] Configure gallery sharing permissions for target subscriptions
  - [ ] Define image versioning strategy
- [ ] Create dedicated resource group for Packer builds
- [ ] Set up build network/subnet (if required for GCC High compliance)

## Epic 3: Packer Configuration
- [ ] Create base Packer template for RHEL 9
  - [ ] Configure Azure ARM builder
  - [ ] Set managed image vs VHD output
  - [ ] Configure target Compute Gallery
- [ ] Implement Packer provisioners
  - [ ] Shell provisioner for pre-Ansible setup
  - [ ] Ansible provisioner integration
- [ ] Add Packer variables file for environment-specific configs
- [ ] Implement Packer validation steps
- [ ] Create Packer build documentation

## Epic 4: Ansible Hardening Playbooks
- [ ] Create Ansible inventory/variables structure
- [ ] Implement FIPS enablement playbook
  - [ ] Enable FIPS mode
  - [ ] Configure crypto policies
  - [ ] Validate FIPS compliance
- [ ] Implement STIG hardening playbook
  - [ ] Apply RHEL 9 STIG baseline (use ansible-lockdown or DISA STIG Ansible)
  - [ ] Document STIG exceptions/tailoring for containers
  - [ ] Create override variables file for container-specific exemptions
- [ ] Implement patching playbook
  - [ ] Configure DNF/YUM repositories (RHUI or custom mirrors)
  - [ ] Apply all security updates
  - [ ] Handle kernel updates
- [ ] Implement agent installation playbooks
  - [ ] Install and configure Elastic Agent
  - [ ] Install Microsoft Defender for Cloud agent
  - [ ] Verify agent connectivity
- [ ] Container runtime preparation
  - [ ] Install Podman
  - [ ] Configure SELinux policies for containers
  - [ ] Test container workload compatibility
- [ ] Implement validation/testing playbook
  - [ ] STIG compliance scanning (OpenSCAP)
  - [ ] Container functionality tests
  - [ ] Agent health checks

## Epic 5: CI/CD Pipeline
- [ ] Create GitHub Actions workflow (or Azure DevOps pipeline)
  - [ ] Trigger on schedule (monthly for patches?)
  - [ ] Trigger on manual workflow_dispatch
  - [ ] Trigger on PR to main branch
- [ ] Implement pipeline stages
  - [ ] Packer validate
  - [ ] Packer build
  - [ ] Post-build validation (spin up test VM)
  - [ ] Promote to Compute Gallery
- [ ] Add pipeline notifications (Slack/Teams/Email)
- [ ] Implement build artifact retention policy

## Epic 6: Testing & Validation
- [ ] Create automated test suite
  - [ ] InSpec/Cinc Auditor tests for STIG compliance
  - [ ] Container runtime tests (podman run, docker run)
  - [ ] Agent connectivity tests
- [ ] Deploy test VM from new image
- [ ] Execute validation test suite
- [ ] Perform manual smoke testing
- [ ] Security scanning of built image (Defender, Qualys, etc.)

## Epic 7: Documentation & Handoff
- [ ] Create runbook for image updates
- [ ] Document STIG exceptions and justifications
- [ ] Create troubleshooting guide
- [ ] Document image versioning and rollback procedures
- [ ] Create access control documentation (SSH key management, etc.)
- [ ] Present solution to security/compliance team
- [ ] Get sign-off from stakeholders

## Epic 8: Production Rollout
- [ ] Update Terraform/Bicep to reference new Compute Gallery image
- [ ] Create image update notification process
- [ ] Deploy pilot VMs using new image
- [ ] Monitor for issues (30-day burn-in)
- [ ] Full production cutover
- [ ] Decommission old VM provisioning request process

## Epic 9: Maintenance & Operations
- [ ] Set up monthly image rebuild schedule
- [ ] Create process for emergency patches
- [ ] Implement image lifecycle management
- [ ] Create metrics/dashboard for image usage
- [ ] Schedule quarterly STIG review for new controls
