name: Bootstrap Terraform State Storage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to bootstrap'
        required: true
        default: 'nonprod'
        type: choice
        options:
          - nonprod
          - prod

permissions:
  id-token: write  # Required for OIDC
  contents: read

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      - name: Create Resource Group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Get environment
            ENV="${{ github.event.inputs.environment }}"
            
            # Define parameters based on environment
            if [ "$ENV" == "prod" ]; then
              PARAM_FILE="bootstrap/prod.bicepparam"
              RG_NAME="terraform-bootstrap-prod"
            else
              PARAM_FILE="bootstrap/main.bicepparam"
              RG_NAME="terraform-bootstrap-nonprod"
            fi
            
            LOCATION="usgovvirginia"
            
            # Create resource group if it doesn't exist
            echo "Creating resource group $RG_NAME in $LOCATION..."
            az group create --name $RG_NAME --location $LOCATION --tags Environment=$ENV Purpose=TerraformState ManagedBy=GitHub
            
            # Store resource group name for next steps
            echo "RESOURCE_GROUP=$RG_NAME" >> $GITHUB_ENV
            echo "PARAM_FILE=$PARAM_FILE" >> $GITHUB_ENV
      
      - name: Deploy Bicep template with bicepparam
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Deploy using bicepparam
            echo "Deploying with $PARAM_FILE to resource group $RESOURCE_GROUP..."
            DEPLOYMENT_NAME="terraform-bootstrap-${{ github.run_number }}"
            
            az deployment group create \
              --resource-group $RESOURCE_GROUP \
              --parameters $PARAM_FILE \
              --name $DEPLOYMENT_NAME
            
            echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV
      
      - name: Output storage account information
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Get deployment output
            echo "Getting outputs from deployment $DEPLOYMENT_NAME in resource group $RESOURCE_GROUP..."
            
            # Extract storage account details
            STORAGE_ACCT=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query properties.outputs.storageAccountName.value -o tsv)
            CONTAINER=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query properties.outputs.containerName.value -o tsv)
            
            # Output for GitHub Actions
            echo "STORAGE_ACCOUNT=$STORAGE_ACCT" >> $GITHUB_ENV
            echo "CONTAINER_NAME=$CONTAINER" >> $GITHUB_ENV
            
            echo "Bootstrap complete. Storage account: $STORAGE_ACCT, Container: $CONTAINER"
            echo "To use with Terraform, update GitHub repository secrets:"
            echo "TFSTATE_RESOURCE_GROUP=$RESOURCE_GROUP"
            echo "TFSTATE_STORAGE_ACCOUNT=$STORAGE_ACCT"
            echo "TFSTATE_CONTAINER=$CONTAINER"
