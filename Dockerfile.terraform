# Terraform with Azure Providers image
FROM alpine:3.19

# Set versions
ARG TERRAFORM_VERSION=1.7.3
ARG AZURE_CLI_VERSION=2.54.0

# Install required packages for Terraform and Azure CLI
RUN apk add --no-cache \
    curl \
    unzip \
    bash \
    git \
    openssh-client \
    ca-certificates \
    jq \
    python3 \
    py3-pip \
    gcc \
    musl-dev \
    python3-dev \
    libffi-dev \
    openssl-dev

# Download and install Terraform
RUN curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
    unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin && \
    rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
    chmod +x /usr/local/bin/terraform

# Install Azure CLI
RUN pip3 install --upgrade pip && \
    pip3 install azure-cli==${AZURE_CLI_VERSION}

# Create a directory for Azure provider cache
RUN mkdir -p /root/.terraform.d/plugin-cache

# Create a directory for Terraform configuration
RUN mkdir -p /root/.terraform.d/

# Create provider configuration file
RUN echo '{\n  "provider_installation": {\n    "filesystem_mirror": {\n      "path": "/root/.terraform.d/plugin-cache"\n    },\n    "direct": {}\n  }\n}' > /root/.terraform.d/terraform.rc

# Pre-install Azure provider
RUN mkdir -p /providers && \
    cd /providers && \
    cat > main.tf << 'EOF' \
terraform { \
  required_providers { \
    azurerm = { \
      source = "hashicorp/azurerm" \
      version = "~> 3.82.0" \
    } \
    azuread = { \
      source = "hashicorp/azuread" \
      version = "~> 2.47.0" \
    } \
  } \
} \
EOF
RUN cd /providers && terraform init

# Verify installations
RUN terraform --version && \
    az --version

# Set working directory
WORKDIR /workspace

# Create a helper script to initialize environment
RUN echo '#!/bin/bash\n\
if [ "$1" = "init" ] || [ "$1" = "apply" ] || [ "$1" = "plan" ]; then\n\
  echo "Setting up Azure environment..."\n\
  if [ -n "$ARM_CLIENT_ID" ] && [ -n "$ARM_CLIENT_SECRET" ] && [ -n "$ARM_TENANT_ID" ] && [ -n "$ARM_SUBSCRIPTION_ID" ]; then\n\
    echo "Using service principal authentication"\n\
  elif [ -n "$AZURE_CLI_AUTH" ]; then\n\
    echo "Attempting Azure CLI authentication"\n\
    az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID\n\
    az account set --subscription $AZURE_SUBSCRIPTION_ID\n\
  fi\n\
fi\n\
exec terraform "$@"' > /usr/local/bin/terraform-azure-wrapper.sh && \
    chmod +x /usr/local/bin/terraform-azure-wrapper.sh

# Set entrypoint to our wrapper script
ENTRYPOINT ["/usr/local/bin/terraform-azure-wrapper.sh"]
