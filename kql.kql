name: Sync Iron Bank Images with Security Scanning

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - nonprod
        - prod
      cleanup_enabled:
        description: 'Enable cleanup of old images'
        type: boolean
        default: true
      wait_for_scan:
        description: 'Wait for security scan completion'
        type: boolean
        default: true
      fail_on_critical:
        description: 'Fail if critical vulnerabilities found'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run cleanup (show what would be deleted)'
        type: boolean
        default: false
      specific_repo:
        description: 'Sync specific repository only (optional)'
        type: string
        required: false
        default: ''
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC (defaults to nonprod)

jobs:
  sync-images:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'nonprod' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment variables
      run: |
        echo "ENVIRONMENT=${{ github.event.inputs.environment || 'nonprod' }}" >> $GITHUB_ENV
        echo "CLEANUP_ENABLED=${{ github.event.inputs.cleanup_enabled || 'true' }}" >> $GITHUB_ENV
        echo "WAIT_FOR_SCAN=${{ github.event.inputs.wait_for_scan || 'true' }}" >> $GITHUB_ENV
        echo "FAIL_ON_CRITICAL=${{ github.event.inputs.fail_on_critical || 'false' }}" >> $GITHUB_ENV
        echo "DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_ENV
        echo "SPECIFIC_REPO=${{ github.event.inputs.specific_repo || '' }}" >> $GITHUB_ENV
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Login to Iron Bank
      uses: docker/login-action@v3
      with:
        registry: registry1.dso.mil
        username: ${{ secrets.IRON_BANK_USER }}
        password: ${{ secrets.IRON_BANK_TOKEN }}
    
    - name: Verify registry access
      run: |
        echo "## Registry Access Verification" >> $GITHUB_STEP_SUMMARY
        echo "✅ Successfully logged into Azure Container Registry: ${{ vars.ACR_REGISTRY_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Successfully logged into Iron Bank registry" >> $GITHUB_STEP_SUMMARY
    
    - name: List repositories to sync
      run: |
        echo "## Repositories Configuration" >> $GITHUB_STEP_SUMMARY
        echo "### Repositories in images.json:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        make list-repositories >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ env.SPECIFIC_REPO }}" ]; then
          echo "### Syncing specific repository: ${{ env.SPECIFIC_REPO }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Syncing all repositories" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Sync specific repository
      if: ${{ env.SPECIFIC_REPO != '' }}
      run: |
        echo "Syncing specific repository: ${{ env.SPECIFIC_REPO }}"
        make sync-repository REPO="${{ env.SPECIFIC_REPO }}"
      env:
        TARGET_REGISTRY: ${{ vars.ACR_REGISTRY }}
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
        SOURCE_REGISTRY: registry1.dso.mil/ironbank
    
    - name: Sync all images
      if: ${{ env.SPECIFIC_REPO == '' }}
      run: |
        echo "Syncing all images to ${{ vars.ACR_REGISTRY }}"
        make pull-and-push-all
      env:
        TARGET_REGISTRY: ${{ vars.ACR_REGISTRY }}
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
        SOURCE_REGISTRY: registry1.dso.mil/ironbank
    
    - name: Wait for security scans
      if: ${{ env.WAIT_FOR_SCAN == 'true' }}
      run: |
        echo "## Security Scanning" >> $GITHUB_STEP_SUMMARY
        echo "⏳ Waiting for Microsoft Defender scans to complete..." >> $GITHUB_STEP_SUMMARY
        echo "Waiting for Microsoft Defender scans to complete..."
        sleep 180  # Wait 3 minutes for initial scan
        make wait-for-scans
      env:
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Generate vulnerability summary
      id: vulnerability_summary
      run: |
        echo "## Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Get summary by repository
        echo "### Summary by Repository" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        make vulnerability-summary-by-repo >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Generate CSV report
        make vulnerability-report-by-repo
        
        # Count critical vulnerabilities across all repositories
        CRITICAL_COUNT=$(az graph query \
          --graph-query "SecurityResources \
          | where type == 'microsoft.security/assessments' \
          | where properties.displayName contains 'Azure registry container images should have vulnerabilities resolved' \
          | summarize by assessmentKey=name \
          | join kind=inner ( \
            securityresources \
            | where type == 'microsoft.security/assessments/subassessments' \
            | extend assessmentKey = extract('.*assessments/(.+?)/.*',1,  id) \
          ) on assessmentKey \
          | project properties \
          | extend \
            severity = properties.status.severity, \
            additionalData = todynamic(properties.additionalData) \
          | where isnotempty(additionalData.artifactDetails) \
          | extend registryName = tostring(additionalData.artifactDetails.registryHost) \
          | where registryName contains '${{ vars.ACR_REGISTRY_NAME }}' \
          | where severity == 'High' \
          | count" \
          --output tsv --query "data[0].count_" 2>/dev/null || echo "0")
        
        echo "critical_vulns=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "### ⚠️ Critical Vulnerabilities Found: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ No Critical Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "📊 Full vulnerability report saved as artifact" >> $GITHUB_STEP_SUMMARY
      env:
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Check detailed vulnerabilities by repository
      run: |
        echo "Generating detailed vulnerability report by repository..."
        make check-vulnerabilities-by-repo > detailed_vulnerabilities.txt 2>&1
        
        # Export detailed JSON data
        make export-vulnerability-data
        
        echo "### Detailed Vulnerabilities by Repository" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -n 50 detailed_vulnerabilities.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        if [ $(wc -l < detailed_vulnerabilities.txt) -gt 50 ]; then
          echo "📄 Full detailed report available in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-scan-results-${{ env.ENVIRONMENT }}-${{ github.run_number }}
        path: |
          detailed_vulnerabilities.txt
          vulnerability_report.csv
          vulnerability_report_*.json
        retention-days: 30
    
    - name: Fail on critical vulnerabilities
      if: ${{ env.FAIL_ON_CRITICAL == 'true' && steps.vulnerability_summary.outputs.critical_vulns > 0 }}
      run: |
        echo "❌ CRITICAL VULNERABILITIES DETECTED!"
        echo "Found ${{ steps.vulnerability_summary.outputs.critical_vulns }} critical vulnerabilities!"
        echo "Check the uploaded artifacts for detailed vulnerability information."
        echo "## ❌ DEPLOYMENT FAILED DUE TO CRITICAL VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
        echo "Critical vulnerabilities found: ${{ steps.vulnerability_summary.outputs.critical_vulns }}" >> $GITHUB_STEP_SUMMARY
        exit 1
    
    - name: Cleanup old images
      if: ${{ env.CLEANUP_ENABLED == 'true' && (success() || failure()) }}
      run: |
        echo "## Image Cleanup" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.DRY_RUN }}" = "true" ]; then
          echo "🔍 Running cleanup in DRY RUN mode..." >> $GITHUB_STEP_SUMMARY
          make cleanup-by-repository DRY_RUN=true
        else
          echo "🧹 Cleaning up old images..." >> $GITHUB_STEP_SUMMARY
          make cleanup-by-repository
        fi
        echo "✅ Cleanup completed" >> $GITHUB_STEP_SUMMARY
      env:
        TARGET_REGISTRY: ${{ vars.ACR_REGISTRY }}
        ACR_REGISTRY_NAME: ${{ vars.ACR_REGISTRY_NAME }}
    
    - name: Final summary
      if: always()
      run: |
        echo "## 📋 Final Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Registry**: ${{ vars.ACR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cleanup Enabled**: ${{ env.CLEANUP_ENABLED }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical Vulnerabilities**: ${{ steps.vulnerability_summary.outputs.critical_vulns || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ env.SPECIFIC_REPO }}" ]; then
          echo "- **Repository Synced**: ${{ env.SPECIFIC_REPO }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Repositories Synced**: All configured repositories" >> $GITHUB_STEP_SUMMARY
        fi
