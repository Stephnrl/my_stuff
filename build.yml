name: Build Iron Bank .NET Image

on:
  workflow_dispatch:
    inputs:
      dotnet_version:
        description: '.NET SDK Version'
        required: true
        default: '8.0'
        type: choice
        options:
          - '6.0'
          - '7.0'
          - '8.0'
      image_tag:
        description: 'Output image tag'
        required: true
        default: 'latest'
        type: string

env:
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  BASE_IMAGE_PREFIX: 'base/ironbank-ubi9-minimal'
  DOTNET_IMAGE_PREFIX: 'dotnet/ironbank-ubi9'

permissions:
  id-token: write # Required for OIDC authentication
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to Azure Container Registry
        uses: azure/cli@v2
        with:
          inlineScript: |
            az acr login --name $(echo ${{ env.ACR_REGISTRY }} | cut -d. -f1)

      - name: Set image variables
        id: vars
        run: |
          DOTNET_VERSION=${{ github.event.inputs.dotnet_version }}
          IMAGE_TAG=${{ github.event.inputs.image_tag }}
          
          # Local tag for base image (won't be pushed to registry)
          BASE_IMAGE_LOCAL="localhost/${{ env.BASE_IMAGE_PREFIX }}:local"
          
          # Final image tag that will be pushed to registry
          DOTNET_IMAGE="${{ env.ACR_REGISTRY }}/${{ env.DOTNET_IMAGE_PREFIX }}-${DOTNET_VERSION}"
          FULL_TAG="${DOTNET_IMAGE}:${IMAGE_TAG}"
          
          echo "dotnet_version=${DOTNET_VERSION}" >> $GITHUB_OUTPUT
          echo "base_image_local=${BASE_IMAGE_LOCAL}" >> $GITHUB_OUTPUT
          echo "dotnet_image=${DOTNET_IMAGE}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT
          
          echo "Building base image: ${BASE_IMAGE_LOCAL}"
          echo "Building .NET image: ${FULL_TAG}"

      # Step 1: Build Iron Bank base image locally (not pushed to registry)
      - name: Build Iron Bank base image locally
        uses: docker/build-push-action@v6
        with:
          context: ./images/base/ironbank-ubi9
          push: false
          load: true
          tags: ${{ steps.vars.outputs.base_image_local }}
          cache-from: type=gha,scope=base-ironbank-ubi9
          cache-to: type=gha,scope=base-ironbank-ubi9,mode=max

      # Step 2: Build .NET image using local Iron Bank base image and push to registry
      - name: Build and push .NET image
        uses: docker/build-push-action@v6
        with:
          context: ./images/dotnet/ironbank-ubi9
          push: true
          tags: ${{ steps.vars.outputs.full_tag }}
          build-args: |
            BASE_REGISTRY=localhost
            BASE_IMAGE=${{ env.BASE_IMAGE_PREFIX }}
            BASE_TAG=local
            DOTNET_VERSION=${{ steps.vars.outputs.dotnet_version }}
          cache-from: type=gha,scope=dotnet-ironbank-ubi9-${{ steps.vars.outputs.dotnet_version }}
          cache-to: type=gha,scope=dotnet-ironbank-ubi9-${{ steps.vars.outputs.dotnet_version }},mode=max

      - name: Scan image for vulnerabilities
        uses: azure/cli@v2
        with:
          inlineScript: |
            # This is a placeholder for a proper vulnerability scanner
            # You would integrate with your preferred scanning tool here
            echo "Scanning image ${{ steps.vars.outputs.full_tag }} for vulnerabilities"
            
            # Example if using Trivy:
            # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${{ steps.vars.outputs.full_tag }}

      - name: Tag image as latest if requested
        if: github.event.inputs.image_tag != 'latest' && github.ref == 'refs/heads/main'
        uses: azure/cli@v2
        with:
          inlineScript: |
            docker tag ${{ steps.vars.outputs.full_tag }} ${{ steps.vars.outputs.dotnet_image }}:latest
            docker push ${{ steps.vars.outputs.dotnet_image }}:latest
