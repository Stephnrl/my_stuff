name: Terraform IAM Management

on:
  pull_request:
    branches: [main]
    paths:
      - 'terraform/contractor-iam/**'
      - '.github/workflows/terraform-iam.yml'
  
  push:
    branches: [main]
    paths:
      - 'terraform/contractor-iam/**'
      - '.github/workflows/terraform-iam.yml'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - validate
          - plan
          - apply
          - destroy
      
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      
      confirm_destroy:
        description: 'Type "destroy" to confirm destruction (only for destroy action)'
        required: false
        type: string

env:
  TERRAFORM_VERSION: '1.6.0'
  WORKING_DIR: './terraform/contractor-iam'
  AWS_REGION: 'us-east-1'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'validate')
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          role-session-name: github-actions-terraform-validate
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=contractor-iam/${{ github.event.inputs.environment || 'development' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}
      plan_output: ${{ steps.show.outputs.plan }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          role-session-name: github-actions-terraform-plan
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=contractor-iam/${{ github.event.inputs.environment || 'development' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Select Terraform Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment || 'development' }} || \
          terraform workspace new ${{ github.event.inputs.environment || 'development' }}
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/${{ github.event.inputs.environment || 'development' }}.tfvars" \
            -out=tfplan \
            -input=false \
            -detailed-exitcode \
            -no-color
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
      
      - name: Save Plan
        if: steps.plan.outputs.exitcode == '2'
        run: |
          terraform show -no-color tfplan > plan.txt
          terraform show -json tfplan > plan.json
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Upload Plan
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'development' }}-${{ github.run_id }}
          path: |
            ${{ env.WORKING_DIR }}/tfplan
            ${{ env.WORKING_DIR }}/plan.txt
            ${{ env.WORKING_DIR }}/plan.json
      
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('${{ env.WORKING_DIR }}/plan.txt', 'utf8');
            const planLines = plan.split('\n');
            const truncatedPlan = planLines.length > 100 
              ? planLines.slice(0, 100).join('\n') + '\n... (truncated, see artifacts for full plan)'
              : plan;
            
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            **Plan Exit Code:** ${{ steps.plan.outputs.exitcode }}
            - 0 = No changes
            - 1 = Error
            - 2 = Changes to apply
            
            *Environment: \`${{ github.event.inputs.environment || 'development' }}\`*
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Plan Status
        if: steps.plan.outputs.exitcode == '1'
        run: exit 1

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [plan]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.plan.outputs.plan_exitcode == '2')
    
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}
    
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          role-session-name: github-actions-terraform-apply
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'development' }}-${{ github.run_id }}
          path: ${{ env.WORKING_DIR }}
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=contractor-iam/${{ github.event.inputs.environment || 'development' }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.event.inputs.environment || 'development' }}
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -input=false \
            -no-color \
            tfplan
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Capture Outputs
        id: outputs
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Save specific outputs for later use
          echo "role_arn=$(terraform output -raw role_arn)" >> $GITHUB_OUTPUT
          echo "role_name=$(terraform output -raw role_name)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Create Issue Comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue?.number;
            if (issue_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: `‚úÖ Terraform Apply completed successfully!\n\nEnvironment: \`${{ github.event.inputs.environment || 'development' }}\`\nRole ARN: \`${{ steps.outputs.outputs.role_arn }}\``
              });
            }

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment:
      name: ${{ github.event.inputs.environment }}-destroy
    
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
      - name: Verify Destroy Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "destroy" ]; then
            echo "‚ùå Destroy confirmation not provided. Type 'destroy' to confirm."
            exit 1
          fi
      
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          role-session-name: github-actions-terraform-destroy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=contractor-iam/${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.event.inputs.environment }}
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform Destroy Plan
        id: destroy_plan
        run: |
          terraform plan \
            -destroy \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -out=destroy.tfplan \
            -input=false \
            -no-color
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Show Destroy Plan
        run: |
          echo "## Resources to be destroyed:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color destroy.tfplan | grep -E "will be destroyed|must be replaced" >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Terraform Destroy
        id: destroy
        run: |
          terraform apply \
            -input=false \
            -no-color \
            destroy.tfplan
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Cleanup Workspace
        if: success()
        run: |
          terraform workspace select default
          terraform workspace delete ${{ github.event.inputs.environment }} || true
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Summary
        if: always()
        run: |
          echo "## Destroy Summary" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ steps.destroy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.WORKING_DIR }}
          soft_fail: true
          format: sarif
          out: tfsec-results.sarif
      
      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec-results.sarif
      
      - name: Checkov Security Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIR }}
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
