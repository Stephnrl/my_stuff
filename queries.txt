// Basic query for APIM errors
ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| where ResponseCode >= 500 or ResponseCode == 429
| project TimeGenerated, OperationId, ApiId, ResponseCode, ResponseSize, Method, BackendResponseCode
| order by TimeGenerated desc

// Query to see error distribution
ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| where ResponseCode >= 400
| summarize count() by ResponseCode, bin(TimeGenerated, 15m)
| render timechart

//Looking For Specific Issues

//Throttling (429) errors:

ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| where ResponseCode == 429
| project TimeGenerated, ApiId, OperationId, ProductId, UserId
| order by TimeGenerated desc

//Server errors (5xx):

ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| where ResponseCode >= 500
| project TimeGenerated, ApiId, OperationId, BackendResponseCode, BackendTime, TotalTime
| order by TimeGenerated desc

//Slow responses:

ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| project ApiId, OperationId, TotalTime, BackendTime
| where TotalTime > 1000 // More than 1 second
| order by TotalTime desc

//High latency pattern:

ApiManagementGatewayLogs
| where TimeGenerated > ago(24h)
| summarize avg(TotalTime) by bin(TimeGenerated, 5m), ApiId
| render timechart



// Basic performance metrics for a specific deployment
let WorkloadName = "your-deployment-name";
KubePodInventory
| where ControllerName == WorkloadName
| distinct Computer, ContainerID, PodUID
| join 
(
    Perf
    | where ObjectName == "K8SContainer" 
    | where CounterName == "cpuUsageNanoCores" or CounterName == "memoryRssBytes"
    | project Computer, CounterName, CounterValue, ContainerID, TimeGenerated
)
on Computer, ContainerID
| project TimeGenerated, PodUID, CounterName, CounterValue
| summarize AvgValue = avg(CounterValue) by bin(TimeGenerated, 5m), CounterName
| render timechart

// Comprehensive health check for a specific workload
let WorkloadName = "your-deployment-name"; // Replace with your workload name
let WorkloadNamespace = "your-namespace"; // Replace with your namespace
// CPU and Memory usage
let performanceMetrics = 
KubePodInventory
| where ControllerName == WorkloadName and Namespace == WorkloadNamespace
| distinct Computer, ContainerID, PodUID
| join 
(
    Perf
    | where ObjectName == "K8SContainer" 
    | where CounterName in ("cpuUsageNanoCores", "memoryRssBytes", "memoryWorkingSetBytes")
    | project Computer, CounterName, CounterValue, ContainerID, TimeGenerated
)
on Computer, ContainerID
| project TimeGenerated, PodUID, CounterName, CounterValue, ContainerID
| summarize AvgValue = avg(CounterValue) by bin(TimeGenerated, 10m), CounterName;

// Pod restarts and status
let podStatus = 
KubePodInventory
| where ControllerName == WorkloadName and Namespace == WorkloadNamespace
| summarize PodCount = dcount(PodUID), RestartCount = sum(PodRestartCount) by bin(TimeGenerated, 10m), PodStatus
| project TimeGenerated, PodStatus, PodCount, RestartCount;

// Container status 
let containerStatus =
KubePodInventory
| where ControllerName == WorkloadName and Namespace == WorkloadNamespace
| join kind=leftouter
(
    KubeEvents
    | where Source == "Pod"
    | extend PodName = tostring(split(Namespace, "/")[1])
    | project TimeGenerated, PodName, EventMessage = Message
)
on $left.Name == $right.PodName
| project TimeGenerated, PodName=Name, ContainerStatus, EventMessage
| summarize Events = make_set(EventMessage) by bin(TimeGenerated, 10m), ContainerStatus
| project TimeGenerated, ContainerStatus, Events;

// Return all three datasets
performanceMetrics, podStatus, containerStatus


// HTTP performance for API-based workloads
let WorkloadName = "your-deployment-name";
let WorkloadNamespace = "your-namespace";
KubePodInventory
| where ControllerName == WorkloadName and Namespace == WorkloadNamespace
| distinct Computer, ContainerName, PodUID
| join
(
    ContainerLog
    | where LogEntry contains "GET" or LogEntry contains "POST" or LogEntry contains "HTTP" 
    | parse LogEntry with * "HTTP" StatusCode:int " " ResponseTime:int "ms" *
    | where isnotempty(StatusCode) and isnotempty(ResponseTime)
)
on Computer, ContainerName
| project TimeGenerated, StatusCode, ResponseTime
| summarize 
    AvgResponseTime = avg(ResponseTime), 
    MaxResponseTime = max(ResponseTime),
    RequestCount = count(),
    ErrorCount = countif(StatusCode >= 400)
    by bin(TimeGenerated, 5m)
| extend ErrorRate = ErrorCount*100.0/RequestCount
| render timechart
